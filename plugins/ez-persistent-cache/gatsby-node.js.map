{"version":3,"sources":["src/gatsby-node.ts"],"names":["pluginOptionsSchema","Joi","object","persistentDir","string","required","description","pluginNames","array","items","enabled","boolean","getPaths","rootDir","pluginName","pluginPath","path","join","persistentPath","onPreBootstrap","store","reporter","remove","getState","program","directory","task","createProgress","length","start","setStatus","tick","done","onPostBuild","console","log"],"mappings":"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","sourcesContent":["import path from \"path\";\nimport { ensureDir, copy, rmdir } from \"fs-extra\";\nimport { GatsbyNode, PluginOptions } from \"gatsby\";\n\nexport interface ThisPluginOptions extends PluginOptions {\n  persistentDir: string;\n  pluginNames: string[];\n  remove: boolean;\n  enabled: boolean;\n}\n\nexport const pluginOptionsSchema: GatsbyNode[\"pluginOptionsSchema\"] = ({\n  Joi,\n}) => {\n  return Joi.object({\n    persistentDir: Joi.string()\n      .required()\n      .description(\"Directory where persistent cache will be stored.\"),\n    pluginNames: Joi.array()\n      .items(Joi.string())\n      .required()\n      .description(\"Names of plugins to persist.\"),\n    enabled: Joi.boolean()\n      .required()\n      .description(\n        \"Set to false to prevent persisting, allows you to clean the persistent cache.\"\n      ),\n  });\n};\n\nconst getPaths = (\n  persistentDir: string,\n  rootDir: string,\n  pluginName: string\n) => {\n  return {\n    pluginPath: path.join(rootDir, \".cache\", \"caches\", pluginName),\n    persistentPath: path.join(persistentDir, pluginName),\n  };\n};\n\nexport const onPreBootstrap: GatsbyNode[\"onPreBootstrap\"] = async function (\n  { store, reporter },\n  { persistentDir, pluginNames, enabled, remove }: ThisPluginOptions\n) {\n  if (!enabled) {\n    return;\n  }\n  const rootDir = store.getState().program.directory;\n  const task = reporter.createProgress(\n    `plugin-persist-cache: `,\n    pluginNames.length,\n    0\n  );\n  task.start();\n  for (const pluginName of pluginNames) {\n    task.setStatus(`Restoring cache for ${pluginName}`);\n    const { pluginPath, persistentPath } = getPaths(\n      persistentDir,\n      rootDir,\n      pluginName\n    );\n\n    await ensureDir(pluginPath);\n    await ensureDir(persistentPath);\n\n    await copy(persistentPath, pluginPath);\n    task.tick(1);\n  }\n  task.setStatus(`Restored cache for ${pluginNames.length} plugins`);\n  task.done();\n};\n\nexport const onPostBuild: GatsbyNode[\"onPostBuild\"] = async function (\n  { store, reporter },\n  { persistentDir, pluginNames, enabled }: ThisPluginOptions\n) {\n  if (!enabled) {\n    return;\n  }\n\n  const rootDir = store.getState().program.directory;\n  const task = reporter.createProgress(\n    `plugin-persist-cache: `,\n    pluginNames.length,\n    0\n  );\n  task.start();\n  for (const pluginName of pluginNames) {\n    task.setStatus(`Saving cache for ${pluginName}`);\n    const { pluginPath, persistentPath } = getPaths(\n      persistentDir,\n      rootDir,\n      pluginName\n    );\n\n    await ensureDir(pluginPath);\n    await ensureDir(persistentPath);\n\n    console.log(`copy${pluginPath}, ${persistentPath});`);\n    await copy(pluginPath, persistentPath);\n\n    task.tick(1);\n  }\n  task.setStatus(`Saved cache for ${pluginNames.length} plugins`);\n  task.done();\n};\n"],"file":"gatsby-node.js"}