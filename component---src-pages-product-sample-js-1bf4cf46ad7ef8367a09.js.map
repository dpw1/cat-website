{"version":3,"file":"component---src-pages-product-sample-js-1bf4cf46ad7ef8367a09.js","mappings":"mLAEW,EAAQ,mC,UCwCnB,EArCoB,SAAC,GAAgB,IAC/BA,EAD8B,EAAbC,OAUrB,OARID,GAAwC,iBAAjBA,IAEvBA,EADEA,EAAaE,QAAQ,MAAQ,EAChBF,EAAaG,MAAM,KAEnB,CAACH,IAKlB,uBAAK,sBAAiBI,UDfD,0CCgBlBJ,GACCA,EAAaK,KAAI,SAACC,EAAOC,GAAR,OACf,wBAAMC,IAAKD,GACRA,EAAa,GACZ,wBAAMH,UDlBA,qCCmBJ,gBAACK,EAAA,EAAD,CAAMC,OAAQ,WAGA,iBAAVJ,GAAsB,SAAUA,GACtC,qBAAGF,UAAWO,EAAcC,KAAMN,EAAMO,MACrCP,EAAMQ,MAAMC,QAGC,iBAAVT,KAAwB,SAAUA,IACxC,wBAAMF,UAAWO,GAAeL,EAAMQ,MAAMC,QAE5B,iBAAVT,GACN,wBAAMF,UAAWO,GAAeL,EAAMS,QAhB3B,IAsBxB,C,mNC+HD,EAjJoB,SAACC,IACYC,EAAAA,EAAAA,YAAWC,EAAAA,IACMC,iBADhD,IAEMC,GAAgBC,EAAAA,EAAAA,GAAwB,EAAG,UAAU,GAC3D,GAAsBC,EAAAA,EAAAA,UAAS,GAC/B,GADA,WACoCA,EAAAA,EAAAA,WAAS,IAC7C,GADA,WACwCA,EAAAA,EAAAA,UACtCF,EAAcG,aAAa,KAE7B,GAHA,WAGoCD,EAAAA,EAAAA,UAASF,EAAcI,YAAY,KAAvE,WACoBH,EAAAA,EAAAA,GAAwB,EAAG,SAE/C,OACE,gBAACI,EAAA,EAAD,KAkIH,C","sources":["webpack://gatsby-ecommerce-theme/./src/components/Breadcrumbs/BreadCrumbs.module.css","webpack://gatsby-ecommerce-theme/./src/components/Breadcrumbs/BreadCrumbs.js","webpack://gatsby-ecommerce-theme/./src/pages/product/sample.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var breadcrumbs = \"BreadCrumbs-module--breadcrumbs--993H2\";\nexport var crumb = \"BreadCrumbs-module--crumb--Mlfff\";\nexport var spacer = \"BreadCrumbs-module--spacer--lQNGb\";","import React from 'react';\r\n\r\nimport * as styles from './BreadCrumbs.module.css';\r\nimport Icon from '../Icons/Icon';\r\n\r\nconst Breadcrumbs = ({ crumbs }) => {\r\n  let crumbsOutput = crumbs;\r\n  if (crumbsOutput && typeof crumbsOutput !== 'object') {\r\n    if (crumbsOutput.indexOf('>') > -1) {\r\n      crumbsOutput = crumbsOutput.split('>');\r\n    } else {\r\n      crumbsOutput = [crumbsOutput];\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div data-breadcrumbs className={styles.breadcrumbs}>\r\n      {crumbsOutput &&\r\n        crumbsOutput.map((crumb, crumbIndex) => (\r\n          <span key={crumbIndex}>\r\n            {crumbIndex > 0 && (\r\n              <span className={styles.spacer}>\r\n                <Icon symbol={'caret'}></Icon>\r\n              </span>\r\n            )}\r\n            {typeof crumb === 'object' && 'link' in crumb && (\r\n              <a className={styles.crumb} href={crumb.link}>\r\n                {crumb.label.trim()}\r\n              </a>\r\n            )}\r\n            {typeof crumb === 'object' && !('link' in crumb) && (\r\n              <span className={styles.crumb}>{crumb.label.trim()}</span>\r\n            )}\r\n            {typeof crumb !== 'object' && (\r\n              <span className={styles.crumb}>{crumb.trim()}</span>\r\n            )}\r\n          </span>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Breadcrumbs;\r\n","import React, { useState, useContext } from 'react';\r\nimport * as styles from './sample.module.css';\r\n\r\nimport Accordion from '../../components/Accordion';\r\nimport AdjustItem from '../../components/AdjustItem';\r\nimport Button from '../../components/Button';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport Container from '../../components/Container';\r\nimport CurrencyFormatter from '../../components/CurrencyFormatter';\r\nimport Gallery from '../../components/Gallery';\r\nimport SizeList from '../../components/SizeList';\r\nimport Split from '../../components/Split';\r\nimport SwatchList from '../../components/SwatchList';\r\nimport Layout from '../../components/Layout/Layout';\r\n\r\nimport { generateMockProductData } from '../../helpers/mock';\r\nimport Icon from '../../components/Icons/Icon';\r\nimport ProductCardGrid from '../../components/ProductCardGrid';\r\nimport { navigate } from 'gatsby';\r\n\r\nimport AddItemNotificationContext from '../../context/AddItemNotificationProvider';\r\n\r\nconst ProductPage = (props) => {\r\n  const ctxAddItemNotification = useContext(AddItemNotificationContext);\r\n  const showNotification = ctxAddItemNotification.showNotification;\r\n  const sampleProduct = generateMockProductData(1, 'sample')[0];\r\n  const [qty, setQty] = useState(0);\r\n  const [isWishlist, setIsWishlist] = useState(false);\r\n  const [activeSwatch, setActiveSwatch] = useState(\r\n    sampleProduct.colorOptions[0]\r\n  );\r\n  const [activeSize, setActiveSize] = useState(sampleProduct.sizeOptions[0]);\r\n  const suggestions = generateMockProductData(4, 'woman');\r\n\r\n  return (\r\n    <Layout>\r\n      {/* <div className={styles.root}>\r\n        <Container size={'large'} spacing={'min'}>\r\n          <Breadcrumbs\r\n            crumbs={[\r\n              { link: '/', label: 'Home' },\r\n              { label: 'Men', link: '/shop' },\r\n              { label: 'Sweater', link: '/shop' },\r\n              { label: `${sampleProduct.name}` },\r\n            ]}\r\n          />\r\n          <div className={styles.content}>\r\n            <div className={styles.gallery}>\r\n              <Gallery images={sampleProduct.gallery} />\r\n            </div>\r\n            <div className={styles.details}>\r\n              <h1>{sampleProduct.name}</h1>\r\n              <span className={styles.vendor}> by {sampleProduct.vendor}</span>\r\n\r\n              <div className={styles.priceContainer}>\r\n                <CurrencyFormatter appendZero amount={sampleProduct.price} />\r\n              </div>\r\n\r\n              <div>\r\n                <SwatchList\r\n                  swatchList={sampleProduct.colorOptions}\r\n                  activeSwatch={activeSwatch}\r\n                  setActiveSwatch={setActiveSwatch}\r\n                />\r\n              </div>\r\n\r\n              <div className={styles.sizeContainer}>\r\n                <SizeList\r\n                  sizeList={sampleProduct.sizeOptions}\r\n                  activeSize={activeSize}\r\n                  setActiveSize={setActiveSize}\r\n                />\r\n              </div>\r\n\r\n              <div className={styles.quantityContainer}>\r\n                <span>Quantity</span>\r\n                <AdjustItem qty={qty} setQty={setQty} />\r\n              </div>\r\n\r\n              <div className={styles.actionContainer}>\r\n                <div className={styles.addToButtonContainer}>\r\n                  <Button\r\n                    onClick={() => showNotification()}\r\n                    fullWidth\r\n                    level={'primary'}\r\n                  >\r\n                    Add to Bag\r\n                  </Button>\r\n                </div>\r\n                <div\r\n                  className={styles.wishlistActionContainer}\r\n                  role={'presentation'}\r\n                  onClick={() => setIsWishlist(!isWishlist)}\r\n                >\r\n                  <Icon symbol={'heart'}></Icon>\r\n                  <div\r\n                    className={`${styles.heartFillContainer} ${\r\n                      isWishlist === true ? styles.show : styles.hide\r\n                    }`}\r\n                  >\r\n                    <Icon symbol={'heartFill'}></Icon>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className={styles.description}>\r\n                <p>{sampleProduct.description}</p>\r\n                <span>Product code: {sampleProduct.productCode}</span>\r\n              </div>\r\n\r\n              <div className={styles.informationContainer}>\r\n                <Accordion\r\n                  type={'plus'}\r\n                  customStyle={styles}\r\n                  title={'composition & care'}\r\n                >\r\n                  <p className={styles.information}>\r\n                    {sampleProduct.description}\r\n                  </p>\r\n                </Accordion>\r\n                <Accordion\r\n                  type={'plus'}\r\n                  customStyle={styles}\r\n                  title={'delivery & returns'}\r\n                >\r\n                  <p className={styles.information}>\r\n                    {sampleProduct.description}\r\n                  </p>\r\n                </Accordion>\r\n                <Accordion type={'plus'} customStyle={styles} title={'help'}>\r\n                  <p className={styles.information}>\r\n                    {sampleProduct.description}\r\n                  </p>\r\n                </Accordion>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={styles.suggestionContainer}>\r\n            <h2>You may also like</h2>\r\n            <ProductCardGrid\r\n              spacing\r\n              showSlider\r\n              height={400}\r\n              columns={4}\r\n              data={suggestions}\r\n            />\r\n          </div>\r\n        </Container>\r\n\r\n        <div className={styles.attributeContainer}>\r\n          <Split\r\n            image={'/cloth.png'}\r\n            alt={'attribute description'}\r\n            title={'Sustainability'}\r\n            description={\r\n              'We design our products to look good and to be used on a daily basis. And our aim is to inspire people to live with few timeless objects made to last. This is why quality over quantity is a cornerstone of our ethos and we have no interest in trends or seasonal collections.'\r\n            }\r\n            ctaText={'learn more'}\r\n            cta={() => navigate('/blog')}\r\n            bgColor={'var(--standard-light-grey)'}\r\n          />\r\n        </div>\r\n      </div> */}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ProductPage;\r\n"],"names":["crumbsOutput","crumbs","indexOf","split","className","map","crumb","crumbIndex","key","Icon","symbol","styles","href","link","label","trim","props","useContext","AddItemNotificationContext","showNotification","sampleProduct","generateMockProductData","useState","colorOptions","sizeOptions","Layout"],"sourceRoot":""}